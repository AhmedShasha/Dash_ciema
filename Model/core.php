<?php
class core extends mysqli
{
    //    ... $err => Stores errors generated by running any of the class functions

    var $err;

    // .......... Variables of Connection DateBase 'MYSQL' :

    var $server = "localhost";
    var $dbname = "dash_t";
    var $username = "root";
    var $password = "";
    var $dbConnection;
    var $dbError;
    var $path;
    var $upload = 10 * 1024 * 1024;

    public function __construct($host = "", $user = "", $pass = "", $dbname = "")
    {
        $this->dbConnection = new mysqli($this->server, $this->username, $this->password, $this->dbname); // connection with Database mysqli
        if ($this->dbConnection->connect_error) {
            # code...
            $this->setError($this->dbConnection->connect_error);
            // print 'Error connection';
            // die();
            return false;
        } else {
            // print 'Connected ...';
            // die();
            $this->DBquery('SET NAMES utf8');  
        }
    }
    public function __destruct()
    {
        $this->dbConnection->close();
    }
    private function DBquery($query)
    {
        $queries = explode(';', $query);
        foreach ($queries as $q) {
            if (!trim($q))
                continue;
            $result = $this->dbConnection->query($q);
            if (!$result) {
                $this->setError($this->dbConnection->connect_error);
                return false;
            }
        }
        return $result;
    }
    function DBsetError()
    {
        $this->dbError = array(
            $this->dbConnection->errno,
            $this->dbConnection->error
        );
        if ($this->dbConnection->errno == 1062) {
            $key = explode("for key", $this->dbConnection->error);
            if (sizeof($key) == 2) {
                $this->setError("Duplicate data entry (" . str_replace("_", " ", $key[1]) . ")");
            }
        }
    }
    function DBgetError()
    {
        return $this->dbError;
    }

    /*
	 * Function name : setError
	 * Description : Used by the class functions to inform about any errors happened during execution
	 * time.
	 * Parameters : $err => string of the error description.
	 * Return : none
	 *
	 * TODO : Function should be expanded to send critical errors alerts to administrator mobile.
	 */
    function setError($err)
    {
        $this->err = $err;
    }

    // ***************************************************************************************

    /*
	 * Function name : getError
	 * Description : Get information about last error happened during execution time.
	 * Parameters : none
	 * Return : none
	 */
    function getError()
    {
        return $this->err;
    }
    // ***************************************************************************************

    function generateToken($length = 20)
    {
        return bin2hex(random_bytes($length));
    }

    // ***************************************************************************************
    function encode($password)
    {
        return base64_encode(hash('sha256', $password, true));
    }

    // ***************************************************************************************
    /*
        Hashing Passwords ...
    */
    function getHash($password)
    {
        if (!$password)
            $password = $this->generateToken(20);

        return password_hash($this->encode($password), PASSWORD_DEFAULT);
    }

    // ***************************************************************************************
    /*
        Check password validation ... 
    */
    function check_password($password)
    {
        if (!preg_match('/(?=^.{8,}$)((?=.*\d)|(?=.*\w+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$/', $password)) {
            return false;
        }
        return true;
    }

    // *************************************************************************************************************
    /*
        Check username validation ... 
    */
    function check_username($username)
    {
        if (!preg_match('/^[A-Za-z][A-Za-z0-9]{6,20}$/', $username)) {
            return false;
        }

        return true;
    }

    // *************************************************************************************************************
    /*
        Check email validation ... 
    */
    function check_email_address($email)
    {
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return false;
        }

        return true;
    }

    // *************************************************************************************************************

#Region [User Admin Controller]

    function getUser($param)
    {
        $query = "SELECT * FROM `control`";
        $condition = "";

        if (!empty($_POST['username']) && !empty($_POST['password'])) {
            # code...
            if (array_key_exists('id', $param)) {    // Get user id 
                $param['id'] = (int) $param['id'];
                $condition .= " id = $param[id]";
            } else {

                if (array_key_exists('login', $param)) { //auth 

                    $username = mysqli_real_escape_string($this->dbConnection, $param['username']); // username & password from login form 
                    $condition = " username='$username'";
                } 
            }

            if (!empty($condition)) {
                $query .= " WHERE ";
            }

            $result = $this->DBquery("$query $condition");
            if (!$result) {
                $err = $this->DBgetError();
                $this->setError("Error getting user information. : " . $err["1"]);
                return false;
            }

            $returns = array();
            while ($columns = $result->fetch_array(MYSQLI_ASSOC)) {
                $return['id'] = $columns['id'];
                $return['username'] = $columns['username'];

                if (!password_verify($this->encode($param["password"]), $columns["password"])) {
                    $this->setError("Invalid login credentials");
                    return false;
                }
                $return["email"] = $columns["email"];

                array_push($returns, $return);
            }
            mysqli_free_result($result);
            return $returns;
        } else {
            $this->setError("You have to Enter Username & Password");
        }
    }

    function addUser($param)
    {

        $cols = "";
        $vals = "";
        if (!array_key_exists("username", $param) || !$param["username"]) {
            $this->setError("Please, Enter Username");
            return false;
        }
        $cols = "`username` ";
        $param["username"] = mysqli_real_escape_string($this->dbConnection, $param["username"]);
        $vals = "'$param[username]'";

        if (!array_key_exists("email", $param) || !$param["email"] || !$this->check_email_address($param["email"])) {
            $this->setError("Please, Enter a valid email");
            return false;
        }
        $cols .= ", `email` ";
        $param["email"] = mysqli_real_escape_string($this->dbConnection, $param["email"]);
        $vals .= ", '$param[email]'";


        if (!array_key_exists("password", $param) || !$param["password"]) {
            $this->setError("Please, Enter Password");
            return false;
        } else {
            if (!array_key_exists("password2", $param) || !$param["password2"]) {
                $this->setError("Please, Enter password confirm");
                return false;
            } else {
                if ($param["password"] != $param["password2"]) {
                    $this->setError("Password & password confirm match");
                    return false;
                }
            }
        }

        $cols .= ", `password` ";
        $param["password"] = mysqli_real_escape_string($this->dbConnection, $param["password"]);
        $param["password"] = $this->getHash($param["password"]);
        $vals .= ", '$param[password]'";

        $query = "START TRANSACTION"; // 
        $result = $this->DBquery("$query");

        $query = "INSERT INTO `control` ($cols) VALUES ($vals)"; // Adding to Database 
        $result = $this->DBquery("$query");
        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        $result = $this->DBquery("select last_insert_id()");    //  
        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        while ($columns = mysqli_fetch_array($result, MYSQLI_ASSOC)) {
            $id = $columns["last_insert_id()"];
        }

        mysqli_free_result($result);

        $this->DBquery("COMMIT");

        return $id;
    }
#end Region

#Region [Details for dashboard]

    function getDetails($param)
    {
        $query = "SELECT * FROM `التفاصيل`";
        if (array_key_exists("count", $param)) {
            $query = "SELECT COUNT(*) FROM `التفاصيل` ";
        }
        $condition = "";
        if (array_key_exists('id', $param)) {
            $param['id'] = (int) $param['id'];
            $condition .= " id = $param[id]";
        }
        if (!empty($condition)) {
            $query .= " WHERE ";
        }
        $result = $this->DBquery("$query $condition");

        if (!$result) {
            $err = $this->DBgetError();
            $this->setError("Error getting Details information. : " . $err["1"]);
            return false;
        }

        $returns = array();
        while ($columns = $result->fetch_array(MYSQLI_ASSOC)) {
            if (array_key_exists("count", $param))
                return $columns["COUNT(*)"];

            $return['id'] = $columns['id'];
            $return['الشهر'] = $columns['الشهر'];
            $return['اليوم'] = $columns['اليوم'];
            $return['الاسبوع'] = $columns['الاسبوع'];
            $return['التاريخ'] = $columns['التاريخ'];

            $return['id_الورديه'] = $columns['id_الورديه'];
            $return['id_العميل'] = $columns['id_العميل'];
            $return['id_التوصيف'] = $columns['id_التوصيف'];

            $return['الكثافه_المطلوب'] = $columns['الكثافه_المطلوب'];
            $return['الكميه_المقبولة_م3'] = $columns['الكميه_المقبولة_م3'];
            $return['الكميه_المرفوضة_م3'] = $columns['الكميه_المرفوضة_م3'];
            $return['الكميه_المصنعة_م3'] = $columns['الكميه_المصنعة_م3'];

            $return['معدل_الجودة'] = $columns['معدل_الجودة'];
            $return['نسبه_المرفوض'] = $columns['نسبه_المرفوض'];

            
            $return['كيمة_شطرة_م3'] = $columns['كيمة_شطرة_م3'];
            $return['كمية_كسر_زوايام3'] = $columns['كمية_كسر_زوايام3'];
            $return['كمية_الخشونه_م3'] = $columns['كمية_الخشونه_م3'];
            $return['كمية_الابعاد_م3'] = $columns['كمية_الابعاد_م3'];
            $return['كمية_رايش_م3'] = $columns['كمية_رايش_م3'];
            $return['كمية_حروقات_تعرجات_م3'] = $columns['كمية_حروقات_تعرجات_م3'];


            $return['الكثافه_الفعلية'] = $columns['الكثافه_الفعلية'];

            $return['id_الخامه'] = $columns['id_الخامه'];

            $return["العملاء"] = array();
            $client["id"] = $return['id_العميل'];
            $clients = $this->getClients($client);
            if ($clients) {
                $return["العملاء"] = $clients[0];
            }

            $return["الورديات"] = array();
            $shift["id"] = $return['id_الورديه'];
            $shifts = $this->getShifts($shift);
            if ($shifts) {
                $return["الورديات"] = $shifts[0];
            }

            $return["الخامات"] = array();
            $matrial["id"] = $return['id_الخامه'];
            $matrials = $this->getMatrials($matrial);
            if ($matrials) {
                $return["الخامات"] = $matrials[0];
            }

            $return["التوصيف"] = array();
            $desc["id"] = $return['id_التوصيف'];
            $desczz = $this->getDesc($desc);
            if ($desczz) {
                $return["التوصيف"] = $desczz[0];
            }
      
            array_push($returns, $return);
        }
        mysqli_free_result($result);
        return $returns;
    }
    // **************************************************************************************
    function addDetails($param)
    {

        $param['معدل_الجودة']= ($param['الكميه_المقبولة_م3'] / $param['الكميه_المصنعة_م3']) * 100;
        $param['نسبه_المرفوض']= ($param['الكميه_المرفوضة_م3'] / $param['الكميه_المصنعة_م3']) * 100;

        $cols = "";
        $vals = "";

        if (!array_key_exists("الشهر", $param) || !$param["الشهر"]) {
            $this->setError("من فضلك ادخل الشهر");
            return false;
        }
        $cols .= "`الشهر`";
        $param["الشهر"] = mysqli_real_escape_string($this->dbConnection, $param["الشهر"]);
        $vals .= "'$param[الشهر]'";

        if (!array_key_exists("اليوم", $param) || !$param["اليوم"]) {
            $this->setError("من فضلك ادخل اليوم");
            return false;
        }
        $cols .= ", `اليوم`";
        $param["اليوم"] = mysqli_real_escape_string($this->dbConnection, $param["اليوم"]);
        $vals .= ",'$param[اليوم]'";

        if (!array_key_exists("الاسبوع", $param) || !$param["الاسبوع"]) {
            $this->setError("من فضلك ادخل الاسبوع");
            return false;
        }
        $cols .= ", `الاسبوع`";
        $param["الاسبوع"] = mysqli_real_escape_string($this->dbConnection, $param["الاسبوع"]);
        $vals .= ",'$param[الاسبوع]'";

        if (!array_key_exists("التاريخ", $param) || !$param["التاريخ"]) {
            $this->setError("من فضلك ادخل التاريخ");
            return false;
        }
        $cols .= ", `التاريخ`";
        $param["التاريخ"] = mysqli_real_escape_string($this->dbConnection, $param["التاريخ"]);
        $vals .= ",'$param[التاريخ]'";

        if (!array_key_exists("id_الورديه", $param) || !$param["id_الورديه"]) {
            $this->setError("من فضلك ادخل الورديه");
            return false;
        }
        $cols .= ", `id_الورديه`";
        $param["id_الورديه"] = mysqli_real_escape_string($this->dbConnection, $param["id_الورديه"]);
        $vals .= ",'$param[id_الورديه]'";

        if (!array_key_exists("id_العميل", $param) || !$param["id_العميل"]) {
            $this->setError("من فضلك ادخل العميل");
            return false;
        }
        $cols .= ", `id_العميل`";
        $param["id_العميل"] = mysqli_real_escape_string($this->dbConnection, $param["id_العميل"]);
        $vals .= ",'$param[id_العميل]'";

        if (!array_key_exists("id_التوصيف", $param) || !$param["id_التوصيف"]) {
            $this->setError("من فضلك ادخل التوصيف");
            return false;
        }
        $cols .= ", `id_التوصيف`";
        $param["id_التوصيف"] = mysqli_real_escape_string($this->dbConnection, $param["id_التوصيف"]);
        $vals .= ",'$param[id_التوصيف]'";

        if (!array_key_exists("الكثافه_المطلوب", $param) || !$param["الكثافه_المطلوب"]) {
            $this->setError("من فضلك ادخل الكثافه المطلوب");
            return false;
        }
        $cols .= ", `الكثافه_المطلوب`";
        $param["الكثافه_المطلوب"] = mysqli_real_escape_string($this->dbConnection, $param["الكثافه_المطلوب"]);
        $vals .= ",'$param[الكثافه_المطلوب]'";


        if (!array_key_exists("الكميه_المقبولة_م3", $param) || !$param["الكميه_المقبولة_م3"]) {
            $this->setError("من فضلك ادخل الكميه المقبولة م3");
            return false;
        }
        $cols .= ", `الكميه_المقبولة_م3`";
        $param["الكميه_المقبولة_م3"] = mysqli_real_escape_string($this->dbConnection, $param["الكميه_المقبولة_م3"]);
        $vals .= ",'$param[الكميه_المقبولة_م3]'";


        // if (!array_key_exists("الكميه_المرفوضة_م3", $param) || !$param["الكميه_المرفوضة_م3"]) {
        //     $this->setError("من فضلك ادخل الكميه المرفوضة م3");
        //     return false;
        // }
        $cols .= ", `الكميه_المرفوضة_م3`";
        $param["الكميه_المرفوضة_م3"] = mysqli_real_escape_string($this->dbConnection, $param["الكميه_المرفوضة_م3"]);
        $vals .= ",'$param[الكميه_المرفوضة_م3]'";

        if (!array_key_exists("الكميه_المصنعة_م3", $param) || !$param["الكميه_المصنعة_م3"]) {
            $this->setError("من فضلك ادخل الكميه المصنعة م3");
            return false;
        }
        $cols .= ", `الكميه_المصنعة_م3`";
        $param["الكميه_المصنعة_م3"] = mysqli_real_escape_string($this->dbConnection, $param["الكميه_المصنعة_م3"]);
        $vals .= ",'$param[الكميه_المصنعة_م3]'";

        if (!array_key_exists("معدل_الجودة", $param) || !$param["معدل_الجودة"]) {
            $this->setError("من فضلك ادخل معدل الجودة");
            return false;
        }
        $cols .= ", `معدل_الجودة`";
        $param["معدل_الجودة"] = mysqli_real_escape_string($this->dbConnection, $param["معدل_الجودة"]);
        $vals .= ",'$param[معدل_الجودة]'";

        // if (!array_key_exists("نسبه_المرفوض", $param) || !$param["نسبه_المرفوض"]) {
        //     $this->setError("% من فضلك ادخل نسبه المرفوض");
        //     return false;
        // }
        $cols .= ", `نسبه_المرفوض`";
        $param["نسبه_المرفوض"] = mysqli_real_escape_string($this->dbConnection, $param["نسبه_المرفوض"]);
        $vals .= ",'$param[نسبه_المرفوض]'";


        $cols .= ", `كيمة_شطرة_م3`";
        $param["كيمة_شطرة_م3"] = mysqli_real_escape_string($this->dbConnection, $param["كيمة_شطرة_م3"]);
        $vals .= ",'$param[كيمة_شطرة_م3]'";

        
        $cols .= ", `كمية_كسر_زوايام3`";
        $param["كمية_كسر_زوايام3"] = mysqli_real_escape_string($this->dbConnection, $param["كمية_كسر_زوايام3"]);
        $vals .= ",'$param[كمية_كسر_زوايام3]'";


        $cols .= ", `كمية_الخشونه_م3`";
        $param["كمية_الخشونه_م3"] = mysqli_real_escape_string($this->dbConnection, $param["كمية_الخشونه_م3"]);
        $vals .= ",'$param[كمية_الخشونه_م3]'";


        $cols .= ", `كمية_الابعاد_م3`";
        $param["كمية_الابعاد_م3"] = mysqli_real_escape_string($this->dbConnection, $param["كمية_الابعاد_م3"]);
        $vals .= ",'$param[كمية_الابعاد_م3]'";


        $cols .= ", `كمية_رايش_م3`";
        $param["كمية_رايش_م3"] = mysqli_real_escape_string($this->dbConnection, $param["كمية_رايش_م3"]);
        $vals .= ",'$param[كمية_رايش_م3]'";


        $cols .= ", `كمية_حروقات_تعرجات_م3`";
        $param["كمية_حروقات_تعرجات_م3"] = mysqli_real_escape_string($this->dbConnection, $param["كمية_حروقات_تعرجات_م3"]);
        $vals .= ",'$param[كمية_حروقات_تعرجات_م3]'";


        if (!array_key_exists("الكثافه_الفعلية", $param) || !$param["الكثافه_الفعلية"]) {
            $this->setError("من فضلك ادخل الكثافه الفعلية");
            return false;
        }
        $cols .= ", `الكثافه_الفعلية`";
        $param["الكثافه_الفعلية"] = mysqli_real_escape_string($this->dbConnection, $param["الكثافه_الفعلية"]);
        $vals .= ",'$param[الكثافه_الفعلية]'";

        if (!array_key_exists("id_الخامه", $param) || !$param["id_الخامه"]) {
            $this->setError("من فضلك ادخل الخامه");
            return false;
        }
        $cols .= ", `id_الخامه`";
        $param["id_الخامه"] = mysqli_real_escape_string($this->dbConnection, $param["id_الخامه"]);
        $vals .= ",'$param[id_الخامه]'";


        $query = "INSERT INTO `التفاصيل` ($cols) VALUES ($vals)";

        $result = $this->DBquery("$query");

        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        $result = $this->DBquery("select last_insert_id()");
        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        while ($columns = mysqli_fetch_array($result, MYSQLI_ASSOC)) {
            $id = $columns["last_insert_id()"];
        }

        mysqli_free_result($result);

        $this->DBquery("COMMIT");

        return $id;
    }

    // **************************************************************************************
    function updateDetails($param)
    {
        $param['معدل_الجودة']= ($param['الكميه_المقبولة_م3'] / $param['الكميه_المصنعة_م3']) * 100;
        $param['نسبه_المرفوض']= ($param['الكميه_المرفوضة_م3'] / $param['الكميه_المصنعة_م3']) * 100;

        if (!array_key_exists("id", $param)  || !(int) $param["id"]) {
            $this->setError("Invalid services");
            return false;
        }

        $ret["id"] = $param["id"];
        $rets = $this->getDetails($ret);
        if (!$rets) return false;
        $ret = $rets[0];

        $update = "";

        if (array_key_exists("الشهر", $param)) {
            $param["الشهر"] = mysqli_real_escape_string($this->dbConnection, $param["الشهر"]);
            if ($param["الشهر"] != $ret["الشهر"]) {

                if (!$param["الشهر"]) {
                    $this->setError("من فضلك ادخل الشهر");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "الشهر= '$param[الشهر]'";
            }
        }

        if (array_key_exists("اليوم", $param)) {
            $param["اليوم"] = mysqli_real_escape_string($this->dbConnection, $param["اليوم"]);
            if ($param["اليوم"] != $ret["اليوم"]) {
                if (!$param["اليوم"]) {
                    $this->setError("من فضلك ادخل اليوم");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "اليوم= '$param[اليوم]'";
            }
        }

        if (array_key_exists("الاسبوع", $param)) {
            $param["الاسبوع"] = mysqli_real_escape_string($this->dbConnection, $param["الاسبوع"]);
            if ($param["الاسبوع"] != $ret["الاسبوع"]) {
                if (!$param["الاسبوع"]) {
                    $this->setError("من فضلك ادخل الاسبوع");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "الاسبوع= '$param[الاسبوع]'";
            }
        }

        if (array_key_exists("التاريخ", $param)) {
            $param["التاريخ"] = mysqli_real_escape_string($this->dbConnection, $param["التاريخ"]);
            if ($param["التاريخ"] != $ret["التاريخ"]) {
                if (!$param["التاريخ"]) {
                    $this->setError("من فضلك ادخل التاريخ");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "التاريخ= '$param[التاريخ]'";
            }
        }

        if (array_key_exists("id_الورديه", $param)) {
            $param["id_الورديه"] = mysqli_real_escape_string($this->dbConnection, $param["id_الورديه"]);
            if ($param["id_الورديه"] != $ret["id_الورديه"]) {
                if (!$param["id_الورديه"]) {
                    $this->setError("من فضلك ادخل الورديه");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "id_الورديه= '$param[id_الورديه]'";
            }
        }

        if (array_key_exists("id_العميل", $param)) {
            $param["id_العميل"] = mysqli_real_escape_string($this->dbConnection, $param["id_العميل"]);
            if ($param["id_العميل"] != $ret["id_العميل"]) {
                if (!$param["id_العميل"]) {
                    $this->setError("من فضلك ادخل العميل");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "id_العميل= '$param[id_العميل]'";
            }
        }

        if (array_key_exists("id_التوصيف", $param)) {
            $param["id_التوصيف"] = mysqli_real_escape_string($this->dbConnection, $param["id_التوصيف"]);
            if ($param["id_التوصيف"] != $ret["id_التوصيف"]) {
                if (!$param["id_التوصيف"]) {
                    $this->setError("من فضلك ادخل التوصيف");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "id_التوصيف= '$param[id_التوصيف]'";
            }
        }

        if (array_key_exists("الكثافه_المطلوب", $param)) {
            $param["الكثافه_المطلوب"] = mysqli_real_escape_string($this->dbConnection, $param["الكثافه_المطلوب"]);
            if ($param["الكثافه_المطلوب"] != $ret["الكثافه_المطلوب"]) {
                if (!$param["الكثافه_المطلوب"]) {
                    $this->setError("من فضلك ادخل الكثافه المطلوب");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "الكثافه_المطلوب= '$param[الكثافه_المطلوب]'";
            }
        }

        if (array_key_exists("الكميه_المقبولة_م3", $param)) {
            $param["الكميه_المقبولة_م3"] = mysqli_real_escape_string($this->dbConnection, $param["الكميه_المقبولة_م3"]);
            if ($param["الكميه_المقبولة_م3"] != $ret["الكميه_المقبولة_م3"]) {
                if (!$param["الكميه_المقبولة_م3"]) {
                    $this->setError("من فضلك ادخل الكميه المقبولة م3");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "الكميه_المقبولة_م3= '$param[الكميه_المقبولة_م3]'";
            }
        }

        // if (array_key_exists("الكميه_المرفوضة_م3", $param)) {
            $param["الكميه_المرفوضة_م3"] = mysqli_real_escape_string($this->dbConnection, $param["الكميه_المرفوضة_م3"]);
            if ($param["الكميه_المرفوضة_م3"] != $ret["الكميه_المرفوضة_م3"]) {
                if (!$param["الكميه_المرفوضة_م3"]) {
                    $this->setError("من فضلك ادخل الكميه المرفوضة م3");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "الكميه_المرفوضة_م3= '$param[الكميه_المرفوضة_م3]'";
            }
        // }

        if (array_key_exists("الكميه_المصنعة_م3", $param)) {
            $param["الكميه_المصنعة_م3"] = mysqli_real_escape_string($this->dbConnection, $param["الكميه_المصنعة_م3"]);
            if ($param["الكميه_المصنعة_م3"] != $ret["الكميه_المصنعة_م3"]) {
                if (!$param["الكميه_المصنعة_م3"]) {
                    $this->setError("من فضلك ادخل الكميه المصنعة م3");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "الكميه_المصنعة_م3= '$param[الكميه_المصنعة_م3]'";
            }
        }

        if (array_key_exists("معدل_الجودة", $param)) {
            $param["معدل_الجودة"] = mysqli_real_escape_string($this->dbConnection, $param["معدل_الجودة"]);
            if ($param["معدل_الجودة"] != $ret["معدل_الجودة"]) {
                if (!$param["معدل_الجودة"]) {
                    $this->setError("من فضلك ادخل معدل الجودة");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "معدل_الجودة= '$param[معدل_الجودة]'";
            }
        }

        // if (array_key_exists("نسبه_المرفوض", $param)) {
            $param["نسبه_المرفوض"] = mysqli_real_escape_string($this->dbConnection, $param["نسبه_المرفوض"]);
            if ($param["نسبه_المرفوض"] != $ret["نسبه_المرفوض"]) {
                if (!$param["نسبه_المرفوض"]) {
                    $this->setError("من فضلك ادخل نسبه المرفوض");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "نسبه_المرفوض= '$param[نسبه_المرفوض]'";
            }
        // }

        if (array_key_exists("كيمة_شطرة_م3", $param)) {
            $param["كيمة_شطرة_م3"] = mysqli_real_escape_string($this->dbConnection, $param["كيمة_شطرة_م3"]);
            if ($param["كيمة_شطرة_م3"] != $ret["كيمة_شطرة_م3"]) {
                
                if ($update) $update .= ", ";
                $update .= "كيمة_شطرة_م3= '$param[كيمة_شطرة_م3]'";
            }
        }

        if (array_key_exists("كمية_كسر_زوايام3", $param)) {
            $param["كمية_كسر_زوايام3"] = mysqli_real_escape_string($this->dbConnection, $param["كمية_كسر_زوايام3"]);
            if ($param["كمية_كسر_زوايام3"] != $ret["كمية_كسر_زوايام3"]) {
               
                if ($update) $update .= ", ";
                $update .= "كمية_كسر_زوايام3= '$param[كمية_كسر_زوايام3]'";
            }
        }

        if (array_key_exists("كمية_الخشونه_م3", $param)) {
            $param["كمية_الخشونه_م3"] = mysqli_real_escape_string($this->dbConnection, $param["كمية_الخشونه_م3"]);
            if ($param["كمية_الخشونه_م3"] != $ret["كمية_الخشونه_م3"]) {
                
                if ($update) $update .= ", ";
                $update .= "كمية_الخشونه_م3= '$param[كمية_الخشونه_م3]'";
            }
        }

        if (array_key_exists("كمية_الابعاد_م3", $param)) {
            $param["كمية_الابعاد_م3"] = mysqli_real_escape_string($this->dbConnection, $param["كمية_الابعاد_م3"]);
            if ($param["كمية_الابعاد_م3"] != $ret["كمية_الابعاد_م3"]) {
                
                if ($update) $update .= ", ";
                $update .= "كمية_الابعاد_م3= '$param[كمية_الابعاد_م3]'";
            }
        }

        if (array_key_exists("كمية_رايش_م3", $param)) {
            $param["كمية_رايش_م3"] = mysqli_real_escape_string($this->dbConnection, $param["كمية_رايش_م3"]);
            if ($param["كمية_رايش_م3"] != $ret["كمية_رايش_م3"]) {
                
                if ($update) $update .= ", ";
                $update .= "كمية_رايش_م3= '$param[كمية_رايش_م3]'";
            }
        }

        if (array_key_exists("كمية_حروقات_تعرجات_م3", $param)) {
            $param["كمية_حروقات_تعرجات_م3"] = mysqli_real_escape_string($this->dbConnection, $param["كمية_حروقات_تعرجات_م3"]);
            if ($param["كمية_حروقات_تعرجات_م3"] != $ret["كمية_حروقات_تعرجات_م3"]) {
                
                if ($update) $update .= ", ";
                $update .= "كمية_حروقات_تعرجات_م3= '$param[كمية_حروقات_تعرجات_م3]'";
            }
        }

        if (array_key_exists("الكثافه_الفعلية", $param)) {
            $param["الكثافه_الفعلية"] = mysqli_real_escape_string($this->dbConnection, $param["الكثافه_الفعلية"]);
            if ($param["الكثافه_الفعلية"] != $ret["الكثافه_الفعلية"]) {
                if (!$param["الكثافه_الفعلية"]) {
                    $this->setError("من فضلك ادخل الكثافه_الفعلية");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "الكثافه_الفعلية= '$param[الكثافه_الفعلية]'";
            }
        }

        if (array_key_exists("id_الخامه", $param)) {
            $param["id_الخامه"] = mysqli_real_escape_string($this->dbConnection, $param["id_الخامه"]);
            if ($param["id_الخامه"] != $ret["id_الخامه"]) {
                if (!$param["id_الخامه"]) {
                    $this->setError("من فضلك ادخل الخامه");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "id_الخامه= '$param[id_الخامه]'";
            }
        }

        if (!$update) return true;

        $query  = "UPDATE `التفاصيل` SET $update WHERE id=$param[id]"; // print $query;exit();
        $result = $this->DBquery("$query");
        if (!$result) {
            $this->DBsetError();

            return false;
        }
        mysqli_free_result($result);

        return true;
    }

#end Region

# Region [Clinets for Dashboard]
    function getClients($param)
    {
        $query = "SELECT * FROM `العملاء`";
        if (array_key_exists("count", $param)) {
            $query = "SELECT COUNT(*) FROM `العملاء` ";
        }
        $condition = "";
        if (array_key_exists('id', $param)) {
            $param['id'] = (int) $param['id'];
            $condition .= " id = $param[id]";
            // die(var_dump($param['id']));
        }
        if (!empty($condition)) {
            $query .= " WHERE ";
        }
        $result = $this->DBquery("$query $condition");

        if (!$result) {
            $err = $this->DBgetError();
            $this->setError("Error getting Clients information. : " . $err["1"]);
            return false;
        }

        $returns = array();
        while ($columns = $result->fetch_array(MYSQLI_ASSOC)) {
            if (array_key_exists("count", $param))
                return $columns["COUNT(*)"];

            $return['id'] = $columns['id'];
            $return['العميل'] = $columns['العميل'];
            $return['رقم_التوريد'] = $columns['رقم_التوريد'];
            
            array_push($returns, $return);
        }
        mysqli_free_result($result);
        return $returns;
    }

    function addClients($param)
    {
        $cols = "";
        $vals = "";

        if (!array_key_exists("العميل", $param) || !$param["العميل"]) {
            $this->setError(" من فضلك ادخل اسم العميل");
            return false;
        }
        $cols .= "`العميل`";
        $param["العميل"] = mysqli_real_escape_string($this->dbConnection, $param["العميل"]);
        $vals .= "'$param[العميل]'";

        if (!array_key_exists("رقم_التوريد", $param) || !$param["رقم_التوريد"]) {
            $this->setError("من فضلك ادخل رقم التوريد");
            return false;
        }
        $cols .= ", `رقم_التوريد`";
        $param["رقم_التوريد"] = mysqli_real_escape_string($this->dbConnection, $param["رقم_التوريد"]);
        $vals .= ",'$param[رقم_التوريد]'";

        $query = "INSERT INTO `العملاء` ($cols) VALUES ($vals)";

        $result = $this->DBquery("$query");

        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        $result = $this->DBquery("select last_insert_id()");
        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        while ($columns = mysqli_fetch_array($result, MYSQLI_ASSOC)) {
            $id = $columns["last_insert_id()"];
        }

        mysqli_free_result($result);

        $this->DBquery("COMMIT");

        return $id;
    }

    function updateClients($param)
    {
        if (!array_key_exists("id", $param)  || !(int) $param["id"]) {
            $this->setError("Invalid type");
            return false;
        }

        $ret["id"] = $param["id"];
        $rets = $this->getClients($ret);
        if (!$rets) return false;
        $ret = $rets[0];

        $update = "";

        if (array_key_exists("العميل", $param)) {
            $param["العميل"] = mysqli_real_escape_string($this->dbConnection, $param["العميل"]);
            if ($param["العميل"] != $ret["العميل"]) {

                if (!$param["العميل"]) {
                    $this->setError("من فضلك ادخل اسم العميل");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "العميل= '$param[العميل]'";
            }
        }

        if (array_key_exists("رقم_التوريد", $param)) {
            $param["رقم_التوريد"] = mysqli_real_escape_string($this->dbConnection, $param["رقم_التوريد"]);
            if ($param["رقم_التوريد"] != $ret["رقم_التوريد"]) {

                if (!$param["رقم_التوريد"]) {
                    $this->setError("ادخل رقم التوريد");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "رقم_التوريد= '$param[رقم_التوريد]'";
            }
        }

        if (!$update) return true;

        $query  = "UPDATE `العملاء` SET $update WHERE id=$param[id]";  //print $query;die();
        $result = $this->DBquery("$query");
        if (!$result) {
            $this->DBsetError();

            return false;
        }
        mysqli_free_result($result);

        return true;
    }
#end Region

# Region [Shift for Dashboard]
    function getShifts($param)
    {
        $query = "SELECT * FROM `الورديات`";
        if (array_key_exists("count", $param)) {
            $query = "SELECT COUNT(*) FROM `الورديات` ";
        }
        $condition = "";
        if (array_key_exists('id', $param)) {
            $param['id'] = (int) $param['id'];
            $condition .= " id = $param[id]";
        }
        if (!empty($condition)) {
            $query .= " WHERE ";
        }
        $result = $this->DBquery("$query $condition");

        if (!$result) {
            $err = $this->DBgetError();
            $this->setError("Error getting Shift information. : " . $err["1"]);
            return false;
        }

        $returns = array();
        while ($columns = $result->fetch_array(MYSQLI_ASSOC)) {
            if (array_key_exists("count", $param))
                return $columns["COUNT(*)"];

            $return['id'] = $columns['id'];
            $return['النوع'] = $columns['النوع'];
            
            array_push($returns, $return);
        }
        mysqli_free_result($result);
        return $returns;
    }

    function addShifts($param)
    {
        $cols = "";
        $vals = "";

        if (!array_key_exists("النوع", $param) || !$param["النوع"]) {
            $this->setError(" من فضلك ادخل النوع الورديه");
            return false;
        }
        $cols .= "`النوع`";
        $param["النوع"] = mysqli_real_escape_string($this->dbConnection, $param["النوع"]);
        $vals .= "'$param[النوع]'";

        $query = "INSERT INTO `الورديات` ($cols) VALUES ($vals)";

        $result = $this->DBquery("$query");

        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        $result = $this->DBquery("select last_insert_id()");
        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        while ($columns = mysqli_fetch_array($result, MYSQLI_ASSOC)) {
            $id = $columns["last_insert_id()"];
        }

        mysqli_free_result($result);

        $this->DBquery("COMMIT");

        return $id;
    }

    function updateShifts($param)
    {
        if (!array_key_exists("id", $param)  || !(int) $param["id"]) {
            $this->setError("Invalid type");
            return false;
        }

        $ret["id"] = $param["id"];
        $rets = $this->getShifts($ret);
        if (!$rets) return false;
        $ret = $rets[0];

        $update = "";

        if (array_key_exists("النوع", $param)) {
            $param["النوع"] = mysqli_real_escape_string($this->dbConnection, $param["النوع"]);
            if ($param["النوع"] != $ret["النوع"]) {

                if (!$param["النوع"]) {
                    $this->setError("من فضلك ادخل الوردية");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "النوع= '$param[النوع]'";
            }
        }

       
        if (!$update) return true;

        $query  = "UPDATE `الورديات` SET $update WHERE id=$param[id]";  //print $query;die();
        $result = $this->DBquery("$query");
        if (!$result) {
            $this->DBsetError();

            return false;
        }
        mysqli_free_result($result);

        return true;
    }
#end Region

# Region [Matrials for Dashboard]
    function getMatrials($param)
    {
        $query = "SELECT * FROM `الخامات`";
        if (array_key_exists("count", $param)) {
            $query = "SELECT COUNT(*) FROM `الخامات` ";
        }
        $condition = "";
        if (array_key_exists('id', $param)) {
            $param['id'] = (int) $param['id'];
            $condition .= " id = $param[id]";
        }
        if (!empty($condition)) {
            $query .= " WHERE ";
        }
        $result = $this->DBquery("$query $condition");

        if (!$result) {
            $err = $this->DBgetError();
            $this->setError("Error getting Matrials information. : " . $err["1"]);
            return false;
        }

        $returns = array();
        while ($columns = $result->fetch_array(MYSQLI_ASSOC)) {
            if (array_key_exists("count", $param))
                return $columns["COUNT(*)"];

            $return['id'] = $columns['id'];
            $return['النوع'] = $columns['النوع'];
            
            array_push($returns, $return);
        }
        mysqli_free_result($result);
        return $returns;
    }

    function addMatrials($param)
    {
        $cols = "";
        $vals = "";

        if (!array_key_exists("النوع", $param) || !$param["النوع"]) {
            $this->setError(" من فضلك ادخل النوع الورديه");
            return false;
        }
        $cols .= "`النوع`";
        $param["النوع"] = mysqli_real_escape_string($this->dbConnection, $param["النوع"]);
        $vals .= "'$param[النوع]'";

        $query = "INSERT INTO `الخامات` ($cols) VALUES ($vals)";

        $result = $this->DBquery("$query");

        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        $result = $this->DBquery("select last_insert_id()");
        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        while ($columns = mysqli_fetch_array($result, MYSQLI_ASSOC)) {
            $id = $columns["last_insert_id()"];
        }

        mysqli_free_result($result);

        $this->DBquery("COMMIT");

        return $id;
    }

    function updateMatrials($param)
    {
        if (!array_key_exists("id", $param)  || !(int) $param["id"]) {
            $this->setError("Invalid type");
            return false;
        }

        $ret["id"] = $param["id"];
        $rets = $this->getMatrials($ret);
        if (!$rets) return false;
        $ret = $rets[0];

        $update = "";

        if (array_key_exists("النوع", $param)) {
            $param["النوع"] = mysqli_real_escape_string($this->dbConnection, $param["النوع"]);
            if ($param["النوع"] != $ret["النوع"]) {

                if (!$param["النوع"]) {
                    $this->setError("من فضلك ادخل نوع الخامه");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "النوع= '$param[النوع]'";
            }
        }

       
        if (!$update) return true;

        $query  = "UPDATE `الخامات` SET $update WHERE id=$param[id]";  //print $query;die();
        $result = $this->DBquery("$query");
        if (!$result) {
            $this->DBsetError();

            return false;
        }
        mysqli_free_result($result);

        return true;
    }
#end Region

# Region [Desc for Dashboard]
    function getDesc($param)
    {
        $query = "SELECT * FROM `التوصيف`";
        if (array_key_exists("count", $param)) {
            $query = "SELECT COUNT(*) FROM `التوصيف` ";
        }
        $condition = "";
        if (array_key_exists('id', $param)) {
            $param['id'] = (int) $param['id'];
            $condition .= " id = $param[id]";
        }
        if (!empty($condition)) {
            $query .= " WHERE ";
        }
        $result = $this->DBquery("$query $condition");

        if (!$result) {
            $err = $this->DBgetError();
            $this->setError("Error getting Desc information. : " . $err["1"]);
            return false;
        }

        $returns = array();
        while ($columns = $result->fetch_array(MYSQLI_ASSOC)) {
            if (array_key_exists("count", $param))
                return $columns["COUNT(*)"];

            $return['id'] = $columns['id'];
            $return['التوصيف'] = $columns['التوصيف'];
            
            array_push($returns, $return);
        }
        mysqli_free_result($result);
        return $returns;
    }

    function addDesc($param)
    {
        $cols = "";
        $vals = "";

        if (!array_key_exists("التوصيف", $param) || !$param["التوصيف"]) {
            $this->setError(" من فضلك ادخل نوع التوصيف");
            return false;
        }
        $cols .= "`التوصيف`";
        $param["التوصيف"] = mysqli_real_escape_string($this->dbConnection, $param["التوصيف"]);
        $vals .= "'$param[التوصيف]'";

        $query = "INSERT INTO `التوصيف` ($cols) VALUES ($vals)";

        $result = $this->DBquery("$query");

        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        $result = $this->DBquery("select last_insert_id()");
        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        while ($columns = mysqli_fetch_array($result, MYSQLI_ASSOC)) {
            $id = $columns["last_insert_id()"];
        }

        mysqli_free_result($result);

        $this->DBquery("COMMIT");

        return $id;
    }

    function updateDesc($param)
    {
        if (!array_key_exists("id", $param)  || !(int) $param["id"]) {
            $this->setError("Invalid type");
            return false;
        }

        $ret["id"] = $param["id"];
        $rets = $this->getDesc($ret);
        if (!$rets) return false;
        $ret = $rets[0];

        $update = "";

        if (array_key_exists("التوصيف", $param)) {
            $param["التوصيف"] = mysqli_real_escape_string($this->dbConnection, $param["التوصيف"]);
            if ($param["التوصيف"] != $ret["التوصيف"]) {

                if (!$param["التوصيف"]) {
                    $this->setError("من فضلك ادخل التوصيف");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "التوصيف= '$param[التوصيف]'";
            }
        }

       
        if (!$update) return true;

        $query  = "UPDATE `التوصيف` SET $update WHERE id=$param[id]";  //print $query;die();
        $result = $this->DBquery("$query");
        if (!$result) {
            $this->DBsetError();

            return false;
        }
        mysqli_free_result($result);

        return true;
    }
#end Region

}